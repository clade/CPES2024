{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "746c28b6",
   "metadata": {},
   "source": [
    "# Chaînes de caractères\n",
    "\n",
    "## Liste de prix\n",
    "\n",
    "Voici un liste de prix sous forme d'un dictionnaire. Afficher la liste de prix de la façon suivante : \n",
    "\n",
    "<code>\n",
    "   tomates:  3€40\n",
    "    pommes:  2€49\n",
    "   oignons:  1€45\n",
    "</code>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbbdfae1",
   "metadata": {
    "tags": [
     "keep"
    ]
   },
   "outputs": [],
   "source": [
    "price_liste = {'tomates':3.4,\n",
    "     'pommes':2.49,\n",
    "     'oignons':1.45}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "17a0880b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   tomates:  3€40\n",
      "    pommes:  2€49\n",
      "   oignons:  1€45\n"
     ]
    }
   ],
   "source": [
    "for nom, prix in price_liste.items():\n",
    "    prix = f'{prix:5.2f}'\n",
    "    prix = prix.replace('.', '€')\n",
    "    print(f'{nom:>10s}: {prix}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92e4c495",
   "metadata": {},
   "source": [
    "## Unicode\n",
    "\n",
    "Afficher toutes les lettres greques de α à ω. (On pourra copier coller ces lettres pour avoir leurs unicodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0d8e0842",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω\n"
     ]
    }
   ],
   "source": [
    "debut = ord('α')\n",
    "fin = ord('ω')\n",
    "print(' '.join([chr(i) for i in range(debut, fin+1)]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1873746a",
   "metadata": {},
   "source": [
    "## Combien La Fontaine a t-il utilisé de mots différents dans ses fables ?\n",
    "\n",
    "Les lignes suivantes permettent de télécharger l'ensemble des fables de la Fontaine. \n",
    "\n",
    "- Combien y a-t-il de mots différents ? On pourra d'abord remplacer toutes les ponctuations par des espaces, puis créer une liste de mots que l'on mettra en minuscule. On créera ensuite un ensemble dont on regardera la taille.\n",
    "\n",
    "- Quelle est le mot le plus long ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "a9bf15fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "\n",
    "s = requests.get('https://www.gutenberg.org/cache/epub/56327/pg56327.txt').text\n",
    "\n",
    "ponctutation_list = '?,.;:!\\'\\\"-[]()/«»'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "c86331ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10496"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for ponctuation in ponctutation_list:\n",
    "    s = s.replace(ponctuation, ' ')\n",
    "    \n",
    "liste_mots = s.split()\n",
    "liste_mots = [item.strip().lower() for item in liste_mots]\n",
    "ensemble_mots = set(liste_mots)\n",
    "\n",
    "len(ensemble_mots)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "a1f62a31",
   "metadata": {},
   "outputs": [],
   "source": [
    "ensemble_mots = sorted(list(ensemble_mots))\n",
    "tailles = [len(mot) for mot in ensemble_mots]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "e3631c4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['batrachomyomachie']"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taille_max = max(tailles)\n",
    "[mot for mot, taille in zip(ensemble_mots, tailles) if taille==taille_max]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e28e425d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
