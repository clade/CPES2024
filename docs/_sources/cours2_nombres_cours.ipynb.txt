{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fb34488c",
   "metadata": {},
   "source": [
    "# Les nombres\n",
    "\n",
    "## Les entiers\n",
    "\n",
    "Type ``int`` en Python.\n",
    "\n",
    "Il existe plusieurs façons d'entrer un entier sous forme litérale\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7a621526",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 5 # Décimal\n",
    "a = 0b1001 # binaire\n",
    "a = 0x23 # hexadécimal"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "465d87d0",
   "metadata": {},
   "source": [
    "En Python la taille des entiers est illimitée. Par exemple:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9192f5ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "515377520732011331036461129765621272702107522001\n"
     ]
    }
   ],
   "source": [
    "print(3**100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bef0c479",
   "metadata": {},
   "source": [
    "Attention, ce n'est plus le cas lorsque l'on utilise des librairies de calcul numérique (comme numpy ou pandas). Dans ce cas, les nombres sont enregistrés sous une taille finie. Par défaut, il s'agit de nombre enregistré avec 64 bits, en tenant compte du signe, les entiers sont alors compris entre $-2^63$ et $2^63$ (exclu)\n",
    "\n",
    "Attention, lorsqu'il y a un débordement (overflow), il n'y a pas d'erreur et le comportement est inattendu."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0970b333",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-2984622845537545263])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "a = np.array([3])\n",
    "a**100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b894cf0",
   "metadata": {},
   "source": [
    "Lorsqu'un nombre est enregistré sous un format de taille finie, il faut s'imaginer qu'il fonctionne comme une calculatrice dont ont aurait caché les premiers chiffres. Nous allons raisonner en décimal, mais dans la réalité ce sont des bits qui sont manipulés. \n",
    "\n",
    "Si on ne regarde que les trois derniers chiffres (resp. 64 bits) alors les opérations sont faire modulo 1000 (resp. module $2^64$). Par exemple $50 \\times 50 = 2500 = 500$. C'est ce que l'on appel un débordement (overflow). \n",
    "\n",
    "Les nombres négatifs sont enregistré en utilisant une astuce : regardons l'opération (modulo 1000) suivante : $997 + 3 = 0$. Le nombre 997 est donc le nombre qui lorsqu'on lui rajoute 3 donne 0, c'est donc $-3$. Cela explique pourquoi dans l'exemple précédent on obtient un nombre négatif."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4623c69f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d1988aa6",
   "metadata": {},
   "source": [
    "## Les ombres à virgule flottante\n",
    "\n",
    "Type ``float``. Il existe plusieurs façon d'entrer un entier sous forme litérale : soit en mettant explicitement un ``.`` décimal, soit en utilisant le ``e`` de la notation scientifique\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "afcdb49a",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 1234.567\n",
    "c = 3e8 # ou 3E8 soit 3 fois 10 à la puissance 8"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90110051",
   "metadata": {},
   "source": [
    "Attention, le comportement d'un nombre à virgule flottante est différent de celui d'un entier, même lorsqu'il représente un entier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f17b0345",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "515377520732011331036461129765621272702107522001\n",
      "5.153775207320113e+47\n"
     ]
    }
   ],
   "source": [
    "a = 3\n",
    "b = 3. \n",
    "print(a**100)\n",
    "print(b**100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09d24377",
   "metadata": {},
   "source": [
    "Les nombres sont enregistrés en [double précision](http://fr.wikipedia.org/wiki/IEEE_754), sur 64 bits. Il sont enregistrés sous la forme $s\\times m \\times 2^e$ où $s$ est le signe ($\\pm 1$ sur un bit), $m$ la mantisse, un nombre entre 0 et 1 sous la forme $0.xxxxx$ avec en tout 52 bits, et $e$ l'exposant, un nombre entier signé sur 11 bits (soit entre -1024 et 1023).  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7917238c",
   "metadata": {},
   "source": [
    "Attention, la précision des nombre à virgule flottante est limitée. Elle vaut $2^{-52}$, soit environ $10^{-16}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8a6086d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "a = 3.14\n",
    "print(a == a + 1E-15)\n",
    "print(a == a + 1E-16)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1b0d250",
   "metadata": {},
   "source": [
    "## Les nombres complexes\n",
    "\n",
    "Type ``complex``\n",
    "\n",
    "Il sont toujours enregistrés sous la forme de deux nombres à virgules flottantes (partie réelle et partie imaginaire). Il faut utiliser le ``J`` ou ``j`` pour écrire un nombre complexe sous forme litérale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "795e3a7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 1 + 3j\n",
    "a = 1.123j"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb6c45ca",
   "metadata": {},
   "source": [
    "Il faut forcement précéder le ``j`` d'un nombre. Le symbole ``j`` seul désignant une variable. Notons que si il est possible de placer des chiffres dans le nom d'un variable (par exemple ``x1``), il n'est pas possible de commencer une variable par un chiffre. Par exemple ``j1`` pourra désigner une variable mais pas ``1j``."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "575e9d82",
   "metadata": {},
   "source": [
    "On peut facilement accéder à la partie réelle et imaginaire des nombres complexe, ce sont des attributs du nombre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1aa8421c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "3.0\n"
     ]
    }
   ],
   "source": [
    "a = 1 + 3J\n",
    "print(a.real)\n",
    "print(a.imag)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4308b7ab",
   "metadata": {},
   "source": [
    "## Opérations sur le nombres \n",
    "\n",
    "Les opérations sur les nombres sont les suivantes : \n",
    "\n",
    "- somme : ``+``\n",
    "\n",
    "- produit : ``*``\n",
    "\n",
    "- différence ou négation : ``-``\n",
    "\n",
    "- division : ``/``\n",
    "\n",
    "- division entière : ``//``\n",
    "\n",
    "- modulo (reste de la division euclidienne) : ``%`` (par exemple ``7%2``)\n",
    "\n",
    "- puissance : ``**`` (par exemple ``2**10``)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9db20187",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cd5e6519",
   "metadata": {},
   "source": [
    "## Les booléens et comparaison\n",
    "\n",
    "Il existe deux valeurs : ``True`` et ``False`` (attention à la casse). \n",
    "\n",
    "Les comparaisons se font à l'aide des symboles ``<``, ``<=``, ``==``, ``>`` et ``>=``. Pour savoir si deux valeurs sont différentes, on utilise ``!=``. \n",
    "\n",
    "Les opérations sont par ordre de priorité : ``not``, ``and`` et ``or``. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b28b322b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "print(False and False or True)\n",
    "print(False and (False or True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a4d4725",
   "metadata": {},
   "source": [
    "Les opérations ``and`` et ``or`` effectuent en fait un test conditionnel. L'instruction ``A and B`` est interprétée comme ``B if not A else A``, de même ``A or B`` équivaut à ``A if A else B``. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bde9127c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from math import sqrt\n",
    "\n",
    "x = -1\n",
    "#if sqrt(x)>.2:\n",
    "#        print('Hello')\n",
    "\n",
    "if x>0:\n",
    "    if sqrt(x)>.2:\n",
    "        print('Hello')\n",
    "        \n",
    "if (x>0) and (sqrt(x)>.2):\n",
    "    print('Hello')\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5659e8f2",
   "metadata": {},
   "source": [
    "```{warning} \n",
    "Les symboles & et | sont des opérateurs binaires. Ils réalisent les opérations and et or sur les entiers bit par bit en binaire (par exemple 6 & 5 donne 4). Il ne faut pas les utiliser pour les opérations sur des booléens. Ils ont aussi une priorité sur les comparaisons\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0c48c96b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#if (x>0) & (sqrt(x)>0):\n",
    "#    print('Hello')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b47bbadd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bonjour\n"
     ]
    }
   ],
   "source": [
    "x = 3\n",
    "\n",
    "if x==7 & x==3:\n",
    "    print('Bonjour')\n",
    "    \n",
    "if x==7 and x==3:\n",
    "    print('Hello')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30836260",
   "metadata": {},
   "source": [
    "Conclusion : il est préférable de toujours mettre des parenthèses...."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6596c14a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
