{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2eb0e563",
   "metadata": {},
   "source": [
    "# Les nombres\n",
    "\n",
    "## Les entiers\n",
    "\n",
    "Type ``int`` en Python.\n",
    "\n",
    "Il existe plusieurs façon d'entrer un entier sous forme litérale\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fead333c",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 5 # Décimal\n",
    "a = 0b1001 # binaire\n",
    "a = 0x23 # hexadécimal"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a766a9d",
   "metadata": {},
   "source": [
    "En Python la taille des entiers en infinie. Par exemple:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1735a78a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "515377520732011331036461129765621272702107522001\n"
     ]
    }
   ],
   "source": [
    "print(3**100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceac471c",
   "metadata": {},
   "source": [
    "Attention, ce n'est plus le cas lorsque l'on utilise des librairies de calcul numérique (comme numpy ou pandas). Dans ce cas, les nombre sont enregistré sous une taille finie. \n",
    "\n",
    "Attention, lorsqu'il y a un débordement (overflow), il n'y a pas d'erreur et le comportement est inattendu."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b9c95492",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-2984622845537545263])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "a = np.array([3])\n",
    "a**100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c70df52",
   "metadata": {},
   "source": [
    "Lorsqu'un nombre est enregistré sous un format de taille finie, il faut s'imaginer qu'il fonctionne comme les chiffres d'une calculatrice dont ont aurait caché les premiers chiffres. Nous allons raisonner en décimal, mais dans la réalité ce sont de bits qui sont manipulés. \n",
    "\n",
    "Si on ne regarde que les trois derniers chiffres (resp. 64 bits) alors les opérations sont faire modulo 1000 (resp. module $2^64$). Par exemple $50 \\times 50 = 2500 = 500$. C'est ce que l'on appel un débordement. \n",
    "\n",
    "Les nombres négatifs sont enregistré en utilisant une astuce : regardons l'opération (modulo 1000) suivante : $997 + 3 = 0$. Le nombre 997 est donc le nombre qui sont lui rajoute 3 donne 0, c'est donc $-3$. Cela explique pourquoir dans l'exemple précédent on obtient un nombre négatif."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc8a61c6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9c93254f",
   "metadata": {},
   "source": [
    "## Nombre à virgule flottante\n",
    "\n",
    "Type ``float``. Il existe plusieurs façon d'entrer un entier sous forme litérale : soit en mettant explicitement un '.' décimal, soit en utilisant le ``e`` de la notation scientifique\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f27c3705",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 1234.567\n",
    "c = 3e8 # ou 3E8 soit 3 fois 10 à la puissance 8"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "965a0c02",
   "metadata": {},
   "source": [
    "Attention, le comportement d'un nombre à virgule flottante est différent de celui d'un entier, même lorsqu'il représente un entier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d4308d41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "515377520732011331036461129765621272702107522001\n",
      "5.153775207320113e+47\n"
     ]
    }
   ],
   "source": [
    "a = 3\n",
    "b = 3. \n",
    "print(a**100)\n",
    "print(b**100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5b6a69c",
   "metadata": {},
   "source": [
    "Les nombres sont enregistrés en [double précision](http://fr.wikipedia.org/wiki/IEEE_754), sur 64 bits. Il sont tous enregistré sous la forme $s\\times m \\times 2^e$ où $s$ est le signe ($\\pm 1$ sur un bit), m la mantisse, un nombre entre 0 et 1 sous la forme $0.xxxxx$ avec en tout 52 bits, et $e$ l'exposant, un nombre entier signé sur 11 bits (soit entre -1024 et 1023).  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "815e8472",
   "metadata": {},
   "source": [
    "Attention, la précision des nombre à virgule flottante est limitée. Elle vaut $2^{-52}$, soit environ $10^{-16}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "26d4506f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "a = 3.14\n",
    "print(a == a + 1E-15)\n",
    "print(a == a + 1E-16)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce81ec33",
   "metadata": {},
   "source": [
    "## Les nombres complexes\n",
    "\n",
    "Type ``complex``\n",
    "\n",
    "Il sont toujours enregistrés sous la forme de deux nombres à virgule flottante. Il faut utiliser le ``J`` ou ``j`` pour écrire un nombre complexe sous forme litérale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d798c28",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 1 + 3j\n",
    "a = 1.123j"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "735032d3",
   "metadata": {},
   "source": [
    "Il faut forcement précéder le ``j`` d'un nombre. Le symbole ``j`` désignera une variable. Notons que si il est possible de placer des chiffres dans le nom d'un variable (par exemple ``x1``), il n'est pas possible de commencer une variable par un chiffre. Par exemple ``j1`` pourra désigner une variable mais pas ``1j``."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d22822a",
   "metadata": {},
   "source": [
    "On peut facilement accéder à la partie réelle et imaginaire des nombres complexe, ce sont des attribut du nombre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "34f1e29b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "3.0\n"
     ]
    }
   ],
   "source": [
    "a = 1 + 3J\n",
    "print(a.real)\n",
    "print(a.imag)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d18a997",
   "metadata": {},
   "source": [
    "## Opérations sur le nombres \n",
    "\n",
    "Les opérations sur les nombres sont les suivantes : \n",
    "\n",
    "- somme : ``+``\n",
    "\n",
    "- produit : ``*``\n",
    "\n",
    "- différence ou négation : ``-``\n",
    "\n",
    "- division : ``/``\n",
    "\n",
    "- division entière : ``//``\n",
    "\n",
    "- modulo : ``%`` (par exemple ``7%2``)\n",
    "\n",
    "- puissance : ``**`` (par exemple ``2**10``)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a3829b8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "33946c57",
   "metadata": {},
   "source": [
    "Les booléens et comparaison\n",
    "---------------------------\n",
    "\n",
    "Il existe deux valeurs : ``True`` et ``False`` (attention à la casse). \n",
    "\n",
    "Les comparaisons se font à l'aide des symboles ``<``, ``<=``, ``==``, ``>`` et ``>=``. Pour savoir si deux valeurs sont différentes, on utilise ``!=``. \n",
    "\n",
    "Les opérations sont par ordre de priorité : ``not``, ``and`` et ``or``. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "183349e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "print(False and False or True)\n",
    "print(False and (False or True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90e3925e",
   "metadata": {},
   "source": [
    "Les opérations ``and`` et ``or`` effectuent en fait un test conditionnel. L'instruction ``A and B`` est interprétée comme ``B if not A else A``, de même ``A or B`` équivaut à ``A if A else B``. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "de86e7fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from math import sqrt\n",
    "\n",
    "x = -1\n",
    "#if sqrt(x)>.2:\n",
    "#        print('Hello')\n",
    "\n",
    "if x>0:\n",
    "    if sqrt(x)>.2:\n",
    "        print('Hello')\n",
    "        \n",
    "if (x>0) and (sqrt(x)>.2):\n",
    "    print('Hello')\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f912dc24",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7323c317",
   "metadata": {},
   "source": [
    "```{warning} Les symboles ``&`` et ``|`` sont des opérateurs binaires. Ils réalisent les opérations and et or sur les entiers bit par bit en binaire (par exemple ``6 & 5`` donne ``4``). Il ne faut pas les utiliser pour les opérations sur des booléens.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "33d9c4f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#if (x>0) & (sqrt(x)>0):\n",
    "#    print('Hello')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "255ce95b",
   "metadata": {},
   "source": [
    "```{warning} This is an example\n",
    "of a warning directive.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63540ef2",
   "metadata": {},
   "source": [
    "```{warning} Les symboles  Il ne faut pas les utiliser pour les opérations sur des booléens.\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
